# -*- coding: utf-8 -*-
"""
???????? ????? ?????????? ?? ?????? prompt_toolkit
"""

import logging
import os
from typing import Optional
from prompt_toolkit import Application
from prompt_toolkit.layout import Layout as PTKLayout, HSplit, VSplit, Window
from prompt_toolkit.layout.controls import BufferControl, FormattedTextControl
from prompt_toolkit.layout.dimension import Dimension
from prompt_toolkit.key_binding import KeyBindings
from prompt_toolkit.keys import Keys
from prompt_toolkit.filters import Condition
from prompt_toolkit.lexers import PygmentsLexer
from prompt_toolkit.buffer import Buffer
from prompt_toolkit.styles import Style
from prompt_toolkit.widgets import TextArea

from seditor.terminal.layout import Layout as ScreenLayout
from seditor.components.editor_ptk import EditorPanePTK, get_lexer_for_file
from seditor.core.file_tree import FileTree
from seditor.components.file_tree import FileTreePane

# ????????? ???????????
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='seditor_debug.log'
)
logger = logging.getLogger(__name__)


class AppPTK:
    """??????? ????? ?????????? seditor ?? ?????? prompt_toolkit"""

    def __init__(self):
        """????????????? ??????????"""
        # ?????????????? ??????????
        self.screen_layout = ScreenLayout(80, 24)  # ????? ???????????
        
        # ?????? ?????? ?????? (???? ?? blessed, ????? ????? ??????????)
        self.file_tree_pane = FileTreePane(self.screen_layout)
        
        # ???????? ?? prompt_toolkit
        self.editor_pane = EditorPanePTK(self.screen_layout)
        
        # ?????: 'tree' | 'editor'
        self.focused_pane = 'tree'
        
        # ??????? ????? ??? ?????????
        self.editor_buffer = Buffer(name='editor', multiline=True)
        self.editor_pane.buffer = self.editor_buffer
        
        # ??????? KeyBindings
        self.kb = KeyBindings()
        self._setup_keybindings()
        
        # ??????? Layout
        self.layout = self._create_layout()
        
        # ??????? ??????????
        self.app = Application(
            layout=self.layout,
            key_bindings=self.kb,
            full_screen=True,
            style=self._create_style(),
        )
    
    def _create_layout(self) -> PTKLayout:
        """??????? layout ??? prompt_toolkit"""
        
        # ?????? ?????? ?????? (???????? ??? ??????? ?????, ????? ????? ????????)
        tree_control = FormattedTextControl(
            text=self._get_tree_content,
            focusable=True,
        )
        tree_window = Window(
            content=tree_control,
            width=Dimension(weight=1, max=self.screen_layout.tree_width),
            style='class:tree',
            wrap_lines=False,
        )
        
        # ???????? ? ?????????? ??????????
        editor_control = BufferControl(
            buffer=self.editor_buffer,
            lexer=lambda: self.editor_pane.get_lexer(),
            line_numbers=True,
            focusable=True,
        )
        editor_window = Window(
            content=editor_control,
            width=Dimension(weight=3),
            style='class:editor',
            wrap_lines=False,
        )
        
        # ???????????
        separator = Window(
            content=FormattedTextControl(text=lambda: "?"),
            width=Dimension.exact(1),
            style='class:separator',
        )
        
        # ??????????? layout: ?????? | ??????????? | ????????
        container = HSplit([
            tree_window,
            separator,
            editor_window,
        ])
        
        return PTKLayout(container, focused_element=tree_window)
    
    def _get_tree_content(self) -> str:
        """???????? ?????????? ?????? ?????? ??? ???????????"""
        # ???????? ?????????? ??????? ?????
        # ????? ????? ???????? ? ??????? FormattedText
        return "File Tree\n(Double-click to expand)"
    
    def _create_style(self) -> Style:
        """??????? ????? ??? ??????????"""
        return Style([
            ('tree', 'bg:#1e1e1e fg:#d4d4d4'),
            ('editor', 'bg:#1e1e1e fg:#d4d4d4'),
            ('separator', 'fg:#666'),
            ('editor.line-number', '#858585'),
            ('editor.cursor', 'bg:#aeafad'),
            ('editor.selection', 'bg:#264f78'),
        ])
    
    def _setup_keybindings(self) -> None:
        """????????? ?????????? ??????"""
        
        # Tab - ???????????? ??????
        @self.kb.add('tab')
        def switch_focus(event):
            if self.focused_pane == 'tree':
                self.focused_pane = 'editor'
                # ??????????? ????? ?? ????????
                # TODO: ???????? focused_element ? layout
            else:
                self.focused_pane = 'tree'
                # ??????????? ????? ?? ??????
            event.app.invalidate()
        
        # Q - ?????
        @self.kb.add('q')
        def quit(event):
            event.app.exit()
        
        # Enter ? ?????? - ??????? ????/??????????
        @self.kb.add('enter', filter=Condition(lambda: self.focused_pane == 'tree'))
        def open_item(event):
            result = self.file_tree_pane.enter()
            if result:
                # ??????? ???? ? ?????????
                if self.editor_pane.load_file(result):
                    self.focused_pane = 'editor'
            event.app.invalidate()
        
        # ??????? ? ??????
        @self.kb.add('up', filter=Condition(lambda: self.focused_pane == 'tree'))
        def tree_up(event):
            self.file_tree_pane.move_up()
            event.app.invalidate()
        
        @self.kb.add('down', filter=Condition(lambda: self.focused_pane == 'tree'))
        def tree_down(event):
            self.file_tree_pane.move_down()
            event.app.invalidate()
        
        # Option+Left/Right ??? ??????????? ?? ?????? (? ?????????)
        @self.kb.add('escape', 'b', filter=Condition(lambda: self.focused_pane == 'editor'))
        def word_left(event):
            buffer = event.app.current_buffer
            buffer.start_of_word()
        
        @self.kb.add('escape', 'f', filter=Condition(lambda: self.focused_pane == 'editor'))
        def word_right(event):
            buffer = event.app.current_buffer
            buffer.end_of_word()
        
        # Shift+??????? ??? ?????????
        @self.kb.add('s-left', filter=Condition(lambda: self.focused_pane == 'editor'))
        def select_left(event):
            buffer = event.app.current_buffer
            buffer.selection_state.enter_shift_mode()
            buffer.cursor_left()
        
        @self.kb.add('s-right', filter=Condition(lambda: self.focused_pane == 'editor'))
        def select_right(event):
            buffer = event.app.current_buffer
            buffer.selection_state.enter_shift_mode()
            buffer.cursor_right()
        
        # Command+C/V ??? ???????????/??????? (? ?????????)
        # ??????????: ?? macOS ??? ????? ???? 'c-c'/'c-v'
        @self.kb.add('c-c', filter=Condition(lambda: self.focused_pane == 'editor'))
        def copy_text(event):
            buffer = event.app.current_buffer
            if buffer.selection_state:
                # TODO: ??????????? ? ????? ??????
                pass
        
        @self.kb.add('c-v', filter=Condition(lambda: self.focused_pane == 'editor'))
        def paste_text(event):
            buffer = event.app.current_buffer
            # TODO: ??????? ?? ?????? ??????
            pass
    
    def run(self) -> None:
        """????????? ??????????"""
        try:
            self.app.run()
        except KeyboardInterrupt:
            pass
        except Exception as e:
            logger.error(f"??????????? ??????: {e}", exc_info=True)

"""
????????? ?????? ??? ?????? ??????
"""

import os
from typing import Optional, List, Tuple
from seditor.utils.file_utils import scan_directory, normalize_path


class FileNode:
    """???? ?????? ??????"""

    def __init__(self, name: str, path: str, is_dir: bool, parent: Optional['FileNode'] = None):
        """
        ????????????? ????

        Args:
            name: ??? ?????/??????????
            path: ?????? ????
            is_dir: True ???? ??????????, False ???? ????
            parent: ???????????? ????
        """
        self.name = name
        self.path = path
        self.is_dir = is_dir
        self.parent = parent
        self.children: List['FileNode'] = []
        self.expanded = False  # ?????????? ?? ??????????
        self.scanned = False  # ????????????? ?? ????

    def get_depth(self) -> int:
        """???????? ??????? ??????????? ???? (0 - ??????)"""
        depth = 0
        node = self.parent
        while node:
            depth += 1
            node = node.parent
        return depth

    def scan_children(self) -> None:
        """??????????? ???????? ????????"""
        if not self.is_dir or self.scanned:
            return

        try:
            items = scan_directory(self.path)
            self.children = [
                FileNode(name=name, path=full_path, is_dir=is_dir, parent=self)
                for name, is_dir, full_path in items
            ]
            self.scanned = True
        except (PermissionError, OSError):
            self.children = []
            self.scanned = True

    def expand(self) -> None:
        """?????????? ??????????"""
        if self.is_dir:
            if not self.scanned:
                self.scan_children()
            self.expanded = True

    def collapse(self) -> None:
        """???????? ??????????"""
        if self.is_dir:
            self.expanded = False

    def toggle(self) -> None:
        """??????????? ????????? ?????????????"""
        if self.expanded:
            self.collapse()
        else:
            self.expand()


class FileTree:
    """?????? ??????"""

    def __init__(self, root_path: str):
        """
        ????????????? ?????? ??????

        Args:
            root_path: ???? ? ???????? ??????????
        """
        normalized_path = normalize_path(root_path)
        if not os.path.isdir(normalized_path):
            normalized_path = os.getcwd()

        # ??????? ???????? ????
        self.root = FileNode(name=os.path.basename(normalized_path) or normalized_path,
                            path=normalized_path,
                            is_dir=True)
        self.root.expand()  # ???????? ?????????? ?????????? ?? ?????????

        self.current_path = normalized_path
        self.selected_index = 0  # ?????? ?????????? ???????? ? ??????? ??????

    def get_visible_items(self) -> List[FileNode]:
        """
        ???????? ?????? ??????? ????????? (??? ??????????? ???? ? ??????)
        
        Returns:
            ?????? ????? ? ??????????? ? ??????? ???????????
        """
        result = []
        
        def collect_visible(node: FileNode):
            """?????????? ??????? ??? ??????? ????"""
            # ????????? ??? ???????? ???? ???????? ????
            for child in node.children:
                result.append(child)
                # ???? ?????????? ??????????, ????????? ?? ?????
                if child.is_dir and child.expanded:
                    collect_visible(child)
        
        # ?????? ?????? ?????????, ???????? ??? ?????
        if self.root.expanded:
            collect_visible(self.root)
        
        return result

    def get_selected_item(self) -> Optional[FileNode]:
        """???????? ????????? ???????"""
        visible = self.get_visible_items()
        if 0 <= self.selected_index < len(visible):
            return visible[self.selected_index]
        return None

    def move_up(self) -> None:
        """??????????? ????????? ?????"""
        visible = self.get_visible_items()
        if visible:
            self.selected_index = max(0, self.selected_index - 1)

    def move_down(self) -> None:
        """??????????? ????????? ????"""
        visible = self.get_visible_items()
        if visible:
            self.selected_index = min(len(visible) - 1, self.selected_index + 1)

    def enter_directory(self) -> Optional[str]:
        """
        ????? ? ????????? ?????????? ??? ??????? ????
        
        ???? ??????? ?????????? - ??????? ?? ?????? ??????
        ???? ?????? ???? - ??????? ???? ??? ????????

        Returns:
            ???? ? ????? ??? ????????, ??? None ???? ??????????
        """
        selected = self.get_selected_item()
        if not selected:
            return None

        if selected.is_dir:
            # ????? ? ?????????? - ??????? ?? ?????? ??????
            self.current_path = selected.path
            self.selected_index = 0
            # ???????? ???????? ????
            self.root = FileNode(name=os.path.basename(selected.path) or selected.path,
                                path=selected.path,
                                is_dir=True)
            self.root.expand()  # ?????? ?????? ?????????
            return None
        else:
            # ??????? ????
            return selected.path

    def collapse_directory(self) -> None:
        """???????? ????????? ??????????"""
        selected = self.get_selected_item()
        if selected and selected.is_dir:
            selected.collapse()

    def expand_directory(self) -> None:
        """?????????? ????????? ??????????"""
        selected = self.get_selected_item()
        if selected and selected.is_dir:
            selected.expand()

    def go_up_level(self) -> None:
        """????????? ?? ??????? ????"""
        parent_path = os.path.dirname(self.current_path)
        if parent_path != self.current_path:  # ???? ???? ???????????? ??????????
            self.current_path = parent_path
            self.selected_index = 0
            # ???????? ???????? ????
            self.root = FileNode(name=os.path.basename(parent_path) or parent_path,
                                path=parent_path,
                                is_dir=True)
            self.root.expand()

    def delete_selected(self) -> bool:
        """
        ??????? ????????? ????/??????????

        Returns:
            True ???? ???????? ???????, False ?????
        """
        selected = self.get_selected_item()
        if not selected:
            return False

        try:
            if os.path.isdir(selected.path):
                # ???????? ?????????? (?????? ???? ??????)
                os.rmdir(selected.path)
            else:
                # ???????? ?????
                os.remove(selected.path)

            # ???????? ??????
            if selected.parent:
                selected.parent.scanned = False
                selected.parent.scan_children()
            else:
                # ???? ?????? ???????? ???????, ???????? ??????
                self.root.scanned = False
                self.root.scan_children()

            # ??????????????? ?????? ?????????
            visible = self.get_visible_items()
            if self.selected_index >= len(visible):
                self.selected_index = max(0, len(visible) - 1)

            return True
        except (OSError, PermissionError):
            return False

    def refresh(self) -> None:
        """???????? ?????? (??????????????? ??????? ??????????)"""
        self.root.scanned = False
        self.root.scan_children()
        # ???????? ??????????? ??????????
        def refresh_expanded(node: FileNode):
            for child in node.children:
                if child.expanded:
                    child.scanned = False
                    child.scan_children()
                    refresh_expanded(child)
        
        refresh_expanded(self.root)

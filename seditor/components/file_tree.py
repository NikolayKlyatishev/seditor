# -*- coding: utf-8 -*-
"""
?–¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π ?????? (25% ??????)
"""

import os
from seditor.terminal.layout import Layout
from seditor.core.file_tree import FileTree, FileNode


class FileTreePane:
    """?????? ??–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –ø–∞–Ω–µ–ª—å –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤"""

    def __init__(self, layout: Layout, root_path: str = None):
        """
        ????–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –ø–∞–Ω–µ–ª—å –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤ ??????

        Args:
            layout: ?????? –û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ
            root_path: ???? ? –û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ???? (?? ?–û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ?)
        """
        self.layout = layout
        self.x, self.y, self.width, self.height = layout.get_tree_bounds()
        
        # ????–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –ø–∞–Ω–µ–ª—å –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤
        if root_path is None:
            root_path = os.getcwd()
        self.tree = FileTree(root_path)
        
        # ???????? ??? ????????? (???? –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –ø–∞–Ω–µ–ª—å –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤? ???????)
        self.scroll_offset = 0

    def get_display_height(self) -> int:
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ ??–¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π????? (??? ?????????)"""
        return self.height - 1  # -1 ??? ?????????

    def _format_item_name(self, node: FileNode, max_width: int) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–º—è —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ –∏–∫–æ–Ω–∫–∞–º–∏

        Args:
            node: –£–∑–µ–ª –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤
            max_width: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π
        """
        # –£—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ (–æ—Ç—Å—Ç—É–ø—ã)
        depth = node.get_depth()
        
        # –û—Ç—Å—Ç—É–ø: 2 –ø—Ä–æ–±–µ–ª–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å (–¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏)
        indent = "  " * depth
        
        # –ò–∫–æ–Ω–∫–∏ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ —Ñ–∞–π–ª–æ–≤
        if node.is_dir:
            # üìÅ –¥–ª—è —Å–≤—ë—Ä–Ω—É—Ç–æ–π –ø–∞–ø–∫–∏, üìÇ –¥–ª—è —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–π
            icon = "üóÇÔ∏è" if node.expanded else "üóÇÔ∏è"
            prefix = f"{indent}{icon} "
        else:
            # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
            icon = self._get_file_icon(node.name)
            prefix = f"{indent}{icon} "
        
        name = prefix + node.name
        
        # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è
        if len(name) > max_width:
            name = name[:max_width - 3] + "..."
        
        return name
    
    def _get_file_icon(self, filename: str) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            
        Returns:
            Unicode-—Å–∏–º–≤–æ–ª –∏–∫–æ–Ω–∫–∏
        """
        import os
        ext = os.path.splitext(filename)[1].lower()
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –Ω–∞ –∏–∫–æ–Ω–∫–∏
        icon_map = {
            # –ö–æ–¥
            '.py': 'üê†',
            '.js': 'üéä',
            '.ts': 'üéä',
            '.jsx': 'üéä',
            '.tsx': 'üéä',
            '.java': '‚òïÔ∏è',
            '.c': '¬©Ô∏è',
            '.cpp': '¬©Ô∏è',
            '.h': '¬©Ô∏è',
            '.hpp': '¬©Ô∏è',
            '.rs': 'ü¶Ä',
            '.go': 'üêπ',
            '.rb': 'üíé',
            '.php': 'üêò',
            '.swift': 'ü¶Ö',
            '.kt': 'üÖ∫',
            
            # –í–µ–±
            '.html': 'üåê',
            '.css': 'üé®',
            '.scss': 'üé®',
            '.sass': 'üé®',
            '.less': 'üé®',
            
            # –ö–æ–Ω—Ñ–∏–≥–∏
            '.json': '‚öôÔ∏è',
            '.yaml': '‚öôÔ∏è',
            '.yml': '‚öôÔ∏è',
            '.toml': '‚öôÔ∏è',
            '.ini': '‚öôÔ∏è',
            '.conf': '‚öôÔ∏è',
            '.config': '‚öôÔ∏è',
            '.env': 'üîê',
            
            # –î–æ–∫—É–º–µ–Ω—Ç—ã
            '.md': 'üìñ',
            '.txt': 'üìÑ',
            '.pdf': 'üìï',
            '.doc': 'üìò',
            '.docx': 'üìò',
            
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            '.png': 'üñºÔ∏è',
            '.jpg': 'üñºÔ∏è',
            '.jpeg': 'üñºÔ∏è',
            '.gif': 'üñºÔ∏è',
            '.svg': 'üé®',
            '.ico': 'üñºÔ∏è',
            
            # –ê—Ä—Ö–∏–≤—ã
            '.zip': 'üì¶',
            '.tar': 'üì¶',
            '.gz': 'üì¶',
            '.rar': 'üì¶',
            '.7z': 'üì¶',
            
            # –°–∫—Ä–∏–ø—Ç—ã
            '.sh': 'üâà',
            '.bash': 'üâà',
            '.zsh': 'üâà',
            '.fish': 'üâà',
            
            # –î–∞–Ω–Ω—ã–µ
            '.sql': 'üóÑÔ∏è',
            '.db': 'üóÑÔ∏è',
            '.sqlite': 'üóÑÔ∏è',
            '.csv': 'üìä',
            '.xml': 'üìã',
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
            '.lock': 'üîí',
            '.log': 'üìú',
            '.gitignore': 'üö´',
            '.dockerignore': 'üö´',
        }
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        special_names = {
            'Dockerfile': 'üê≥',
            'docker-compose.yml': 'üê≥',
            'Makefile': 'üî®',
            'README.md': 'üìñ',
            'LICENSE': 'üìú',
            'package.json': 'üì¶',
            'requirements.txt': 'üì¶',
            'Cargo.toml': 'üì¶',
            'go.mod': 'üì¶',
            'pyproject.toml': 'üì¶',
            '.gitignore': 'üö´',
            '.env': 'üîê',
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞
        if filename in special_names:
            return special_names[filename]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        if ext in icon_map:
            return icon_map[ext]
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ–±—ã—á–Ω—ã–π —Ñ–∞–π–ª
        return 'üìÑ'

    def render(self, terminal, focused: bool = False) -> str:
        """
        ??–û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –ø–∞–Ω–µ–ª—å –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤ ??????

        Args:
            terminal: ?????? blessed.Terminal
            focused: ??????? ?? ?????? (??? ????????? ????)

        Returns:
            ?????? ? ANSI-?????? ??? ?????????
        """
        output = []
        tree_x, tree_y, tree_width, tree_height = self.layout.get_tree_bounds()

        # ?–û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ
        title = " File Tree "
        if focused:
            # ??–¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π??? ???? ??? –û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ
            bg_color = terminal.on_color_rgb(40, 40, 40)  # –¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π
            output.append(terminal.move_xy(tree_x, tree_y) + bg_color + terminal.bold + title)
        else:
            output.append(terminal.move_xy(tree_x, tree_y) + terminal.bold + title)

        # –û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ? ????????
        visible_items = self.tree.get_visible_items()
        selected_item = self.tree.get_selected_item()

        # ?–û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ???
        display_height = self.get_display_height()
        if self.tree.selected_index >= self.scroll_offset + display_height:
            self.scroll_offset = self.tree.selected_index - display_height + 1
        elif self.tree.selected_index < self.scroll_offset:
            self.scroll_offset = self.tree.selected_index

        # ??–û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ??
        start_y = tree_y + 1
        max_items = min(len(visible_items), display_height)
        max_name_width = tree_width - 2  # -2 ??? ????????

        for i in range(max_items):
            item_index = self.scroll_offset + i
            if item_index >= len(visible_items):
                break

            item = visible_items[item_index]
            is_selected = (item == selected_item)
            y_pos = start_y + i

            # ?–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ —Å–∏–º–≤–æ–ª–∞–º–∏
            name = self._format_item_name(item, max_name_width)

            # ?–û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ???? ????????
            if is_selected:
                if focused:
                    # ????? ?–û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ???? ???????? ? –û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ
                    bg_color = terminal.on_color_rgb(60, 60, 60)  # ?????
                    output.append(terminal.move_xy(tree_x + 1, y_pos) + bg_color + name)
                else:
                    # ????–û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ??? ? ??–û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ
                    bg_color = terminal.on_color_rgb(30, 30, 30)  # –¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π
                    output.append(terminal.move_xy(tree_x + 1, y_pos) + bg_color + name)
            else:
                # ??–¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π?
                if focused:
                    # ?–¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π?????? ??? ??? –û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ
                    bg_color = terminal.on_color_rgb(40, 40, 40)  # –¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π
                    output.append(terminal.move_xy(tree_x + 1, y_pos) + bg_color + " " * tree_width)
                    output.append(terminal.move_xy(tree_x + 1, y_pos) + name)
                else:
                    output.append(terminal.move_xy(tree_x + 1, y_pos) + name)

            # ??????? ???–û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ??????
            remaining_width = tree_width - len(name) - 1
            if remaining_width > 0:
                clear_line = " " * remaining_width
                output.append(terminal.move_xy(tree_x + 1 + len(name), y_pos) + clear_line)

        # ??–¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π???? ?????
        for i in range(max_items, display_height):
            y_pos = start_y + i
            clear_line = " " * tree_width
            if focused:
                bg_color = terminal.on_color_rgb(40, 40, 40)
                output.append(terminal.move_xy(tree_x, y_pos) + bg_color + clear_line)
            else:
                output.append(terminal.move_xy(tree_x, y_pos) + clear_line)

        return "".join(output)

    def _ensure_selection_visible(self, display_height: int, total_items: int) -> None:
        """??????????? ??????? ???????? ? ???????? ????????"""
        if display_height <= 0:
            self.scroll_offset = 0
            return
        if self.tree.selected_index >= self.scroll_offset + display_height:
            self.scroll_offset = self.tree.selected_index - display_height + 1
        elif self.tree.selected_index < self.scroll_offset:
            self.scroll_offset = self.tree.selected_index
        max_scroll = max(0, total_items - display_height)
        if self.scroll_offset > max_scroll:
            self.scroll_offset = max_scroll
        if self.scroll_offset < 0:
            self.scroll_offset = 0

    def get_display_lines(self, max_lines: int | None = None, max_width: int | None = None) -> list[tuple[str, bool]]:
        """???????? ?????? ??? ??????????? ?? prompt_toolkit"""
        visible_items = self.tree.get_visible_items()
        selected_item = self.tree.get_selected_item()

        display_height = max_lines if max_lines is not None else self.get_display_height()
        width_limit = max_width if max_width is not None else max(0, self.width - 2)

        self._ensure_selection_visible(display_height, len(visible_items))

        start_index = self.scroll_offset
        end_index = len(visible_items) if display_height is None else min(len(visible_items), start_index + display_height)

        lines: list[tuple[str, bool]] = []
        for idx in range(start_index, end_index):
            item = visible_items[idx]
            name = self._format_item_name(item, width_limit)
            lines.append((name, item == selected_item))

        return lines

    def move_up(self) -> None:
        """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö"""
        self.tree.move_up()

    def move_down(self) -> None:
        """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤–Ω–∏–∑"""
        self.tree.move_down()

    def enter(self) -> str | None:
        """
        –í–æ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
        
        –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - —Å–¥–µ–ª–∞—Ç—å –µ—ë –∫–æ—Ä–Ω–µ–º –¥–µ—Ä–µ–≤–∞
        –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª - –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è, –∏–ª–∏ None –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        """
        return self.tree.enter_directory()

    def collapse_directory(self) -> None:
        """–°–≤–µ—Ä–Ω—É—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        self.tree.collapse_directory()

    def expand_directory(self) -> None:
        """–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        self.tree.expand_directory()

    def go_up_level(self) -> None:
        """–ü–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ"""
        self.tree.go_up_level()
        self.scroll_offset = 0  # –°–±—Ä–æ—Å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏

    def delete_selected(self) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é

        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        return self.tree.delete_selected()

    def refresh(self) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ"""
        self.tree.refresh()
    
    def reveal_path(self, file_path: str) -> bool:
        """
        –†–∞—Å–∫—Ä—ã—Ç—å –¥–µ—Ä–µ–≤–æ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            True –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω –∏ –≤—ã–¥–µ–ª–µ–Ω
        """
        return self.tree.reveal_path(file_path)
    
    def get_visible_items(self) -> list[FileNode]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∏–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—Å —É—á—ë—Ç–æ–º –ø—Ä–æ–∫—Ä—É—Ç–∫–∏)
        
        Returns:
            –°–ø–∏—Å–æ–∫ –≤–∏–¥–∏–º—ã—Ö FileNode
        """
        all_items = self.tree.get_visible_items()
        
        if not all_items:
            return []
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        start_index = self.scroll_offset
        end_index = min(start_index + self.height, len(all_items))
        
        return all_items[start_index:end_index]
